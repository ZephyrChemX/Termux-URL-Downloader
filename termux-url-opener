#!/data/data/com.termux/files/usr/bin/bash
# termux-url-opener : Share â†’ Termux universal downloader
# Sites: YouTube, TikTok, Instagram/Threads, Twitter/X, Reddit, Bilibili, Facebook, SoundCloud, Twitch
# MP4/WEBM (subtitleâ†’resolusi, tanpa embed thumbnail), MP3/M4A (embed PNG thumbnail), Thumbnail/Foto Only (JPEG)
# Auto: aria2c OFF for YouTube, ON (x4) for others

set -e

# ===== Flair ringan tanpa dependensi =====
_supports_color() { [ -t 1 ] || return 1; return 0; }
cprint() { local code="$1"; shift; if _supports_color; then printf "\033[%sm%s\033[0m" "$code" "$*"; else printf "%s" "$*"; fi; }
printlnc() { cprint "$1" "$2"; printf "\n"; }

# Wrapper tput yang aman (abaikan error agar tidak exit)
tput_safe() { tput "$@" 2>/dev/null || true; }

banner_start_min() {
  local taglines=("Misi penyelamatan video dimulaiâ€¦" "Bentar, lagi manasin mesin roketâ€¦" "Kopi siap, bandwidth siap, gaskeun!" "Downloader on dutyâ€”siap komandan!")
  local tl="${taglines[$((RANDOM % ${#taglines[@]}))]}"
  printf "\n"; printlnc "1;36" "+-------------------------------+"
  printlnc "1;36" "|     Termux URL Downloader     |"
  printlnc "1;36" "+-------------------------------+"
  printlnc "2;37" "  $tl"; printf "\n"
}

wave_funny_min() {
  local frames=( "ðŸŸ©" "ðŸŸ¨" "ðŸŸ¦" "ðŸŸª" "ðŸŸ¥" "ðŸŸ§" "ðŸŸ¦" "âœ¨" "ðŸ˜Ž" "ðŸ”¥" )
  local cols; cols=$(tput cols 2>/dev/null || echo 40); [ "$cols" -gt 80 ] && cols=80
  tput_safe civis
  for _ in $(seq 1 18); do
    line=""
    for __ in $(seq 1 $((cols/2))); do line+="${frames[$RANDOM % ${#frames[@]}]}"; done
    printf "\r%s" "$line"; sleep 0.06
  done
  printf "\r%*s\r" "$cols" " "; tput_safe cnorm
}
wave_ascii_min() {
  local frames=('/' '-' '\' '|' ); local cols; cols=$(tput cols 2>/dev/null || echo 60); [ "$cols" -gt 70 ] && cols=70
  tput_safe civis
  for _ in $(seq 1 30); do
    line=""
    for __ in $(seq 1 $((cols))); do line+="${frames[$RANDOM % 4]}"; done
    printf "\r%s" "$line"; sleep 0.04
  done
  printf "\r%*s\r" "$cols" " "; tput_safe cnorm
}
with_spinner_min() { # with_spinner_min "Pesan..." cmd args...
  local msg="$1"; shift
  if ! _supports_color; then
    printf "%s...\n" "$msg"
    "$@" >/dev/null 2>&1
    printlnc "1;32" "âœ“ $msg"
    return $?
  fi
  local spin='-\|/'; local i=0
  printf "%s " "$msg"
  ("$@" >/dev/null 2>&1) & local pid=$!
  tput_safe civis
  while kill -0 "$pid" 2>/dev/null; do
    i=$(( (i+1) % 4 ))
    printf "\r%s %s" "$msg" "${spin:$i:1}"; sleep 0.08
  done
  wait "$pid"; local rc=$?
  printf "\r"; printlnc "1;32" "âœ“ $msg"; tput_safe cnorm; return $rc
}
banner_done_min() {
  printf "\n"; printlnc "1;32" "+--------------------+"
  printlnc "1;32" "|  SELESAI BOS! âœ“    |"
  printlnc "1;32" "+--------------------+"
  printlnc "2;37"  "File siap dinikmati. Jangan lupa hydrate ðŸ’§"
}

# === Pembuka lucu (sekali di awal) ===
if _supports_color; then
  banner_start_min
  # Pilih salah satu: wave emoji atau ASCII-only
  wave_funny_min
  # wave_ascii_min
else
  echo "Termux URL Downloader"
fi

is_playlist_url() {
  echo "$1" | grep -qiE '(\?|&)list='
}

# Aria2c konservatif + fallback jika tidak tersedia
ARIA_ARGS='aria2c:-x4 -s4 -k1M --file-allocation=none --summary-interval=0 --retry-wait=2 --max-tries=10'
ARIA_DOWNLOADER=()
ARIA_WARNED=0
if command -v aria2c >/dev/null 2>&1; then
  ARIA_DOWNLOADER=(--downloader aria2c --downloader-args "$ARIA_ARGS")
fi

use_aria2c_downloader() {
  if [ ${#ARIA_DOWNLOADER[@]} -eq 0 ]; then
    if [ "$ARIA_WARNED" -eq 0 ]; then
      echo "[!] aria2c tidak ditemukan. Menggunakan downloader bawaan yt-dlp."
      echo "    Install aria2 dengan: pkg install aria2"
      ARIA_WARNED=1
    fi
    DOWNLOADER=()
  else
    DOWNLOADER=("${ARIA_DOWNLOADER[@]}")
  fi
}

# Konversi otomatis foto â†’ JPEG via ffmpeg (abaikan jika sudah JPEG)
CONVERT_TO_JPEG_EXEC="sh -c 'in=\"\$1\"; ext=\"\${in##*.}\"; ext_lower=\$(printf \"%s\" \"\$ext\" | tr \"[:upper:]\" \"[:lower:]\"); if [ \"\$ext_lower\" = \"jpg\" ] || [ \"\$ext_lower\" = \"jpeg\" ]; then exit 0; fi; out=\"\${in%.*}.jpg\"; if ffmpeg -y -loglevel error -i \"\$in\" \"\$out\"; then rm -f \"\$in\"; fi' _ \"{}\""

# Deteksi lokasi gallery-dl (opsional, hanya dipakai untuk mode foto)
if command -v gallery-dl >/dev/null 2>&1; then
  GALLERY_DL_BIN="$(command -v gallery-dl)"
elif [ -x "$HOME/.local/bin/gallery-dl" ]; then
  GALLERY_DL_BIN="$HOME/.local/bin/gallery-dl"
else
  GALLERY_DL_BIN=""
fi

require_deno() {
  if ! command -v deno >/dev/null 2>&1; then
    echo "[!] Deno tidak ditemukan. Install dengan: pkg install deno"
    echo "    Runtime JavaScript diperlukan agar yt-dlp dapat melewati tantangan YouTube terbaru."
    exit 1
  fi
}

require_gallery_dl() {
  if [ -z "$GALLERY_DL_BIN" ]; then
    echo "[!] gallery-dl tidak ditemukan. Install dengan: pip install -U gallery-dl"
    exit 1
  fi
}

gallery_dl_download() {
  require_gallery_dl
  local dest="$1"
  shift
  mkdir -p "$dest"
  "$GALLERY_DL_BIN" \
    -o base-directory="$dest" \
    --no-part \
    "${GDL_COOKIE_OPT[@]}" \
    --exec "$CONVERT_TO_JPEG_EXEC" \
    "$@"
}

set_cookie_opts() {
  local file="$1"
  if [ -n "$file" ] && [ -f "$file" ]; then
    COOKIE_OPT=(--cookies "$file")
    GDL_COOKIE_OPT=(-C "$file")
  else
    COOKIE_OPT=()
    GDL_COOKIE_OPT=()
  fi
}

COOKIE_OPT=()
GDL_COOKIE_OPT=()

# Cookies (opsional)
YT_COOKIES="/sdcard/Download/youtube_cookies.txt"
IG_COOKIES="/sdcard/Download/instagram_cookies.txt"
TW_COOKIES="/sdcard/Download/twitter_cookies.txt"
RD_COOKIES="/sdcard/Download/reddit_cookies.txt"
BB_COOKIES="/sdcard/Download/bilibili_cookies.txt"
FB_COOKIES="/sdcard/Download/facebook_cookies.txt"
SC_COOKIES="/sdcard/Download/soundcloud_cookies.txt"
TC_COOKIES="/sdcard/Download/twitch_cookies.txt"

# Folder output
mkdir -p /sdcard/Movies/YouTube \
         /sdcard/Movies/TikTok \
         /sdcard/Movies/Instagram \
         /sdcard/Movies/Twitter \
         /sdcard/Movies/Reddit \
         /sdcard/Movies/Bilibili \
         /sdcard/Movies/Facebook \
         /sdcard/Movies/SoundCloud \
         /sdcard/Movies/Twitch \
         /sdcard/Music \
         /sdcard/Pictures/Thumbnails \
         /sdcard/Pictures/YouTube \
         /sdcard/Pictures/TikTok \
         /sdcard/Pictures/Instagram \
         /sdcard/Pictures/Twitter \
         /sdcard/Pictures/Reddit \
         /sdcard/Pictures/Bilibili \
         /sdcard/Pictures/Facebook \
         /sdcard/Pictures/SoundCloud \
         /sdcard/Pictures/Twitch \
         /sdcard/Pictures/Lainnya

# Helper submenu: subtitle
pick_subs() {
  echo "Pilih subtitle:"
  echo "1) Indonesia"
  echo "2) English"
  echo "3) Japanese"
  echo "4) Tanpa subtitle"
  read -r -p "Masukkan pilihan [1/2/3/4]: " sub_choice
  case "$sub_choice" in
    1) SUB_OPTS=(--write-subs --sub-lang id --embed-subs) ;;
    2) SUB_OPTS=(--write-subs --sub-lang en --embed-subs) ;;
    3) SUB_OPTS=(--write-subs --sub-lang ja --embed-subs) ;;
    *) SUB_OPTS=() ;;
  esac
}

# Helper submenu: resolusi MP4
pick_res_mp4() {
  echo "Pilih resolusi:"
  echo "1) Terbaik (best available)"
  echo "2) 1080p (prioritas 60fps)"
  echo "3) 720p  (prioritas 60fps)"
  echo "4) 480p"
  read -r -p "Masukkan pilihan [1/2/3/4]: " res_choice
  case "$res_choice" in
    1) FMT="bestvideo+bestaudio/best" ;;
    2) FMT="bestvideo[height<=1080][fps<=60]+bestaudio/best[height<=1080][fps<=60]" ;;
    3) FMT="bestvideo[height<=720][fps<=60]+bestaudio/best[height<=720][fps<=60]" ;;
    4) FMT="bestvideo[height<=480]+bestaudio/best[height<=480]" ;;
    *) FMT="bestvideo+bestaudio/best" ;;
  esac
}

# Helper submenu: resolusi WEBM
pick_res_webm() {
  echo "Pilih resolusi:"
  echo "1) Terbaik (best available)"
  echo "2) 1080p (prioritas 60fps)"
  echo "3) 720p  (prioritas 60fps)"
  echo "4) 480p"
  read -r -p "Masukkan pilihan [1/2/3/4]: " res_choice
  case "$res_choice" in
    1) FMT="bestvideo[ext=webm]+bestaudio[ext=webm]/best[ext=webm]/best" ;;
    2) FMT="bestvideo[ext=webm][height<=1080][fps<=60]+bestaudio[ext=webm]/best[ext=webm][height<=1080][fps<=60]/best[height<=1080][fps<=60]" ;;
    3) FMT="bestvideo[ext=webm][height<=720][fps<=60]+bestaudio[ext=webm]/best[ext=webm][height<=720][fps<=60]/best[height<=720][fps<=60]" ;;
    4) FMT="bestvideo[ext=webm][height<=480]+bestaudio[ext=webm]/best[ext=webm][height<=480]/best[height<=480]" ;;
    *) FMT="bestvideo[ext=webm]+bestaudio[ext=webm]/best[ext=webm]/best" ;;
  esac
}

# Helper submenu: mode gambar
pick_image_mode() {
  echo "Pilih jenis gambar:"
  echo "1) Thumbnail video (format asli)"
  echo "2) Foto tunggal (resolusi asli)"
  echo "3) Carousel lengkap (semua slide)"
  read -r -p "Masukkan pilihan [1/2/3]: " img_choice
  case "$img_choice" in
    1) IMG_MODE="thumbnail" ;;
    2) IMG_MODE="single" ;;
    3) IMG_MODE="carousel" ;;
    *) IMG_MODE="thumbnail" ;;
  esac
}

# Menu utama berwarna
main_menu() {
  if _supports_color; then
    printf "\n"
    printlnc "1;36" "+-------------------------------------------+"
    printlnc "1;36" "|         Termux URL Downloader             |"
    printlnc "1;36" "+-------------------------------------------+"
    printf -v line "| %-43s |" "1) MP4 (subtitle + resolusi)"
    printlnc "1;32" "$line"
    printf -v line "| %-43s |" "2) WEBM (subtitle + resolusi)"
    printlnc "1;34" "$line"
    printf -v line "| %-43s |" "3) MP3 (audio, embed thumbnail)"
    printlnc "1;33" "$line"
    printf -v line "| %-43s |" "4) M4A (audio, embed thumbnail)"
    printlnc "1;35" "$line"
    printf -v line "| %-43s |" "5) Thumbnail / Foto (pilih mode)"
    printlnc "1;31" "$line"
    printf -v line "| %-43s |" "6) Foto saja (otomatis JPEG)"
    printlnc "1;36" "$line"
    printlnc "1;36" "+-------------------------------------------+"
  else
    echo $'\n'"Pilih format:"
    echo "1) MP4 (subtitle + resolusi)"
    echo "2) WEBM (subtitle + resolusi)"
    echo "3) MP3 (audio, embed thumbnail)"
    echo "4) M4A (audio, embed thumbnail)"
    echo "5) Thumbnail / Foto (pilih mode)"
    echo "6) Foto saja (otomatis JPEG)"
  fi
  read -r -p "Masukkan pilihan [1/2/3/4/5/6]: " choice
}

# Sedikit flair sebelum menu pertama
with_spinner_min "Menata folder & cookies" true

require_deno

for url in "$@"; do
  # Tentukan folder, cookies, & downloader
  if echo "$url" | grep -qi 'tiktok\.com'; then
    OUT_MP4_BASE="/sdcard/Movies/TikTok"; OUT_IMG_BASE="/sdcard/Pictures/TikTok"; set_cookie_opts ""; use_aria2c_downloader
  elif echo "$url" | grep -qiE 'instagram\.com|threads\.net'; then
    OUT_MP4_BASE="/sdcard/Movies/Instagram"; OUT_IMG_BASE="/sdcard/Pictures/Instagram"; set_cookie_opts "$IG_COOKIES"; use_aria2c_downloader
  elif echo "$url" | grep -qiE 'twitter\.com|x\.com'; then
    OUT_MP4_BASE="/sdcard/Movies/Twitter";  OUT_IMG_BASE="/sdcard/Pictures/Twitter"; set_cookie_opts "$TW_COOKIES"; use_aria2c_downloader
  elif echo "$url" | grep -qi 'reddit\.com'; then
    OUT_MP4_BASE="/sdcard/Movies/Reddit";   OUT_IMG_BASE="/sdcard/Pictures/Reddit"; set_cookie_opts "$RD_COOKIES"; use_aria2c_downloader
  elif echo "$url" | grep -qi 'bilibili\.com'; then
    OUT_MP4_BASE="/sdcard/Movies/Bilibili"; OUT_IMG_BASE="/sdcard/Pictures/Bilibili"; set_cookie_opts "$BB_COOKIES"; use_aria2c_downloader
  elif echo "$url" | grep -qi 'facebook\.com'; then
    OUT_MP4_BASE="/sdcard/Movies/Facebook"; OUT_IMG_BASE="/sdcard/Pictures/Facebook"; set_cookie_opts "$FB_COOKIES"; use_aria2c_downloader
  elif echo "$url" | grep -qi 'soundcloud\.com'; then
    OUT_MP4_BASE="/sdcard/Movies/SoundCloud"; OUT_IMG_BASE="/sdcard/Pictures/SoundCloud"; set_cookie_opts "$SC_COOKIES"; use_aria2c_downloader
  elif echo "$url" | grep -qi 'twitch\.tv'; then
    OUT_MP4_BASE="/sdcard/Movies/Twitch"; OUT_IMG_BASE="/sdcard/Pictures/Twitch"; set_cookie_opts "$TC_COOKIES"; use_aria2c_downloader
  elif echo "$url" | grep -qi 'youtu'; then
    OUT_MP4_BASE="/sdcard/Movies/YouTube";  OUT_IMG_BASE="/sdcard/Pictures/YouTube"; set_cookie_opts "$YT_COOKIES"; DOWNLOADER=()   # YouTube tanpa aria2c
  else
    OUT_MP4_BASE="/sdcard/Movies"; OUT_IMG_BASE="/sdcard/Pictures/Lainnya"; set_cookie_opts ""; use_aria2c_downloader
  fi

  main_menu

  if is_playlist_url "$url"; then
    case "$choice" in
      1)  # PLAYLIST â†’ MP4
        pick_subs; pick_res_mp4
        yt-dlp --yes-playlist \
          -f "$FMT" --merge-output-format mp4 \
          "${SUB_OPTS[@]}" \
          -o "${OUT_MP4_BASE}/%(playlist_title)s/%(playlist_index)03d - %(title).60s.%(ext)s" \
          "${DOWNLOADER[@]}" "${COOKIE_OPT[@]}" "$url"
        ;;
      2)  # PLAYLIST â†’ WEBM
        pick_subs; pick_res_webm
        yt-dlp --yes-playlist \
          -f "$FMT" --merge-output-format webm \
          "${SUB_OPTS[@]}" \
          -o "${OUT_MP4_BASE}/%(playlist_title)s/%(playlist_index)03d - %(title).60s.%(ext)s" \
          "${DOWNLOADER[@]}" "${COOKIE_OPT[@]}" "$url"
        ;;
      3)  # PLAYLIST â†’ MP3
        yt-dlp --yes-playlist \
          -x --audio-format mp3 --audio-quality 0 --embed-thumbnail --convert-thumbnails png \
          -o "/sdcard/Music/%(playlist_title)s/%(playlist_index)03d - %(title).60s.%(ext)s" \
          "${DOWNLOADER[@]}" "${COOKIE_OPT[@]}" "$url"
        ;;
      4)  # PLAYLIST â†’ M4A
        yt-dlp --yes-playlist \
          -x --audio-format m4a --audio-quality 0 --embed-thumbnail --convert-thumbnails png \
          -o "/sdcard/Music/%(playlist_title)s/%(playlist_index)03d - %(title).60s.%(ext)s" \
          "${DOWNLOADER[@]}" "${COOKIE_OPT[@]}" "$url"
        ;;
      5)  # PLAYLIST â†’ Thumbnail Only
        yt-dlp --yes-playlist \
          --skip-download --write-thumbnail --convert-thumbnails jpg \
          -o "/sdcard/Pictures/Thumbnails/%(playlist_title)s/%(playlist_index)03d - %(title).60s" \
          "${COOKIE_OPT[@]}" "$url"
        ;;
      6)  # PLAYLIST â†’ Foto saja (otomatis JPEG)
        yt-dlp --yes-playlist \
          -f "b[ext=jpg]/b[ext=jpeg]/b[ext=png]/b[ext=webp]/b" \
          -o "${OUT_IMG_BASE}/%(title).60s [%(id)s].%(ext)s" \
          --exec "$CONVERT_TO_JPEG_EXEC" \
          "${DOWNLOADER[@]}" "${COOKIE_OPT[@]}" "$url"
        ;;
      *) echo "Pilihan tidak valid."; exit 1 ;;
    esac
  else
    case "$choice" in
      1)  # NON-PLAYLIST â†’ MP4
        DURATION=$(yt-dlp --no-playlist --print duration "$url" 2>/dev/null | head -n1 | cut -d. -f1)
        if [ -n "$DURATION" ] && [ "$DURATION" -lt 60 ]; then
          FMT="bestvideo+bestaudio/best"; SUB_OPTS=()
        else
          pick_subs; pick_res_mp4
        fi
        yt-dlp --no-playlist \
          -f "$FMT" --merge-output-format mp4 \
          "${SUB_OPTS[@]}" \
          -o "${OUT_MP4_BASE}/%(title).60s.%(ext)s" \
          "${DOWNLOADER[@]}" "${COOKIE_OPT[@]}" "$url"
        ;;
      2)  # NON-PLAYLIST â†’ WEBM
        DURATION=$(yt-dlp --no-playlist --print duration "$url" 2>/dev/null | head -n1 | cut -d. -f1)
        if [ -n "$DURATION" ] && [ "$DURATION" -lt 60 ]; then
          FMT="bestvideo[ext=webm]+bestaudio[ext=webm]/best[ext=webm]/best"; SUB_OPTS=()
        else
          pick_subs; pick_res_webm
        fi
        yt-dlp --no-playlist \
          -f "$FMT" --merge-output-format webm \
          "${SUB_OPTS[@]}" \
          -o "${OUT_MP4_BASE}/%(title).60s.%(ext)s" \
          "${DOWNLOADER[@]}" "${COOKIE_OPT[@]}" "$url"
        ;;
      3)  # NON-PLAYLIST â†’ MP3
        yt-dlp --no-playlist \
          -x --audio-format mp3 --audio-quality 0 --embed-thumbnail --convert-thumbnails png \
          -o "/sdcard/Music/%(title).60s.%(ext)s" \
          "${DOWNLOADER[@]}" "${COOKIE_OPT[@]}" "$url"
        ;;
      4)  # NON-PLAYLIST â†’ M4A
        yt-dlp --no-playlist \
          -x --audio-format m4a --audio-quality 0 --embed-thumbnail --convert-thumbnails png \
          -o "/sdcard/Music/%(title).60s.%(ext)s" \
          "${DOWNLOADER[@]}" "${COOKIE_OPT[@]}" "$url"
        ;;
      5)  # NON-PLAYLIST â†’ Thumbnail / Foto
        pick_image_mode
        case "$IMG_MODE" in
          thumbnail)
            yt-dlp --no-playlist \
              --skip-download --write-thumbnail --convert-thumbnails jpg \
              -o "/sdcard/Pictures/Thumbnails/%(title).60s" \
              "${COOKIE_OPT[@]}" "$url"
            ;;
          single)
            gallery_dl_download "$OUT_IMG_BASE" --range 1 "$url"
            ;;
          carousel)
            gallery_dl_download "$OUT_IMG_BASE" "$url"
            ;;
        esac
        ;;
      6)  # NON-PLAYLIST â†’ Foto saja (otomatis JPEG)
        gallery_dl_download "$OUT_IMG_BASE" "$url"
        ;;
      *) echo "Pilihan tidak valid."; exit 1 ;;
    esac
  fi
done

banner_done_min
